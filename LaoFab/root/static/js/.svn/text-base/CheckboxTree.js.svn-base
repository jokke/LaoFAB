dojo.provide("my_ext.CheckboxTreeNode");

dojo.require("dijit.Tree");
dojo.require("dijit.form.CheckBox");

dojo.declare(
"my_ext.CheckboxTreeNode",
[dijit._TreeNode],
{    
    templateString:"<div class=\"dijitTreeNode\" waiRole=\"presentation\"\n\t><div dojoAttachPoint=\"rowNode\" class=\"dijitTreeRow\" waiRole=\"presentation\"\n\t\t><img src=\"${_blankGif}\" alt=\"\" dojoAttachPoint=\"expandoNode\" class=\"dijitTreeExpando\" waiRole=\"presentation\"\n\t\t><span dojoAttachPoint=\"expandoNodeText\" class=\"dijitExpandoText\" waiRole=\"presentation\"\n\t\t></span\n\t\t><span dojoAttachPoint=\"contentNode\" dojoAttachEvent=\"onmouseenter:_onMouseEnter, onmouseleave:_onMouseLeave\"\n\t\t\tclass=\"dijitTreeContent\" waiRole=\"presentation\">\n\t\t\t<span dojoType=\"dijit.form.CheckBox\"></span><img src=\"${_blankGif}\" alt=\"\" dojoAttachPoint=\"iconNode\" class=\"dijitTreeIcon\" waiRole=\"presentation\"\n\t\t\t><span dojoAttachPoint=\"labelNode\" class=\"dijitTreeLabel\" wairole=\"treeitem\" tabindex=\"-1\" waiState=\"selected-false\" dojoAttachEvent=\"onfocus:_onNodeFocus\"></span>\n\t\t</span\n\t></div>\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitTreeContainer\" waiRole=\"presentation\" style=\"display: none;\"></div>\n</div>\n",
    widgetsInTemplate: true,

    // return the dijit.Checkbox inside the tree node
    getNodeCheckbox: function(){
		if (this._supportingWidgets.length > 0) {
			return this._supportingWidgets[0];
		}
		return null;
    },
      
    setNodeCheckboxValue: function(value){  
        this.getNodeCheckbox().attr('checked',value);
    },

      
    postCreate: function(){
		this.inherited(arguments);

        // preload
        // get value from the store (JSON) of the property "checked" and set the checkbox
		//  store.isItem to exclude dummy root in case of ForestStoreModel
		if (this.tree.model.store.isItem(this.item)) {
			if (!this.tree.model.store.hasAttribute(this.item, 'checked')) {
				// valore di default
				this.tree.model.store.setValue(this.item,'checked', false);
			} else {
				var attrValue = this.tree.model.store.getValue(this.item, 'checked');
				var val = (attrValue === true || (attrValue.toLowerCase && attrValue.toLowerCase() === 'true'));		
				this.setNodeCheckboxValue(val) ;
			}
		}
		// connect onChange of the checkbox to alter the model of the tree
		dojo.connect(this.getNodeCheckbox(),'onChange',this,
					function(){
						this.tree.model.store.setValue(this.item,"checked",(this.getNodeCheckbox().attr('value') == false) ? false : true);
					}) ;
	
    },
          
    getCheckedNodesList: function(nodeArray){
        if ( this.getNodeCheckbox().isChecked() ) {
            nodeArray.push(this.item.label) ;
		}
            
        this.getChildren().forEach(getCheckedNodesList(nodeArray), this);            
    }            
       
});

dojo.provide("my_ext.CheckboxTree");

dojo.declare(
"my_ext.CheckboxTree",
[dijit.Tree],
{
    _createTreeNode: function(/*Object*/ args){
		// summary:
		//		creates a TreeNode
		// description:
		//		Developers can override this method to define their own TreeNode class;
		//		However it will probably be removed in a future release in favor of a way
		//		of just specifying a widget for the label, rather than one that contains
		//		the children too.
		return new my_ext.CheckboxTreeNode(args);
	},
	
    _onItemChange: function(/*Item*/ item){
        this.inherited(arguments);
		
		//---
        var model = this.model,
	        identity = model.getIdentity(item),
	        node = this._itemNodeMap[identity];

        if(node){
			var newValue = this.model.store.getValue(item,"checked") ;
            node.setNodeCheckboxValue(newValue);
        }
    }

});


dojo.provide("my_ext.CheckboxTreeStoreModel");

dojo.declare(
"my_ext.CheckboxTreeStoreModel",
[dijit.tree.TreeStoreModel],
{
	onChange: function(/*dojo.data.Item*/ item){
		var currStore = this.store ;
		var newValue = currStore.getValue(item,"checked") ;

		this.getChildren(item,function(children){      
			dojo.forEach(children,function(child){
				currStore.setValue(child,"checked",newValue) ;
			});
		}) ;    
	}
});


dojo.provide("my_ext.CheckboxForestStoreModel");

dojo.declare(
"my_ext.CheckboxForestStoreModel",
[dijit.tree.ForestStoreModel],
{
	onChange: function(/*dojo.data.Item*/ item){
		var currStore = this.store ;
		var newValue = currStore.getValue(item,"checked") ;

		this.getChildren(item,function(children){      
			dojo.forEach(children,function(child){
				currStore.setValue(child,"checked",newValue) ;
			});
		}) ;    
	}
});