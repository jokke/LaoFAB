<script type='text/javascript' src='[% c.uri_for('/static/js/jquery.autocomplete.min.js') %]'></script>
<script type='text/javascript' src='[% c.uri_for('/static/js/jquery.validate.min.js') %]'></script>
<script type='text/javascript' src='[% c.uri_for('/static/js/jquery.cookie.js') %]'></script>
<script type='text/javascript' src='[% c.uri_for('/static/js/jquery.dynatree.js') %]'></script>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?key=AIzaSyAFxjmg4u-Vz3gnLX7ZyhXSKcyOcnTO5wE&libraries=drawing&sensor=false"></script>
<script type='text/javascript' src='[% c.uri_for('/static/js/gdropdown.js') %]'></script>
<link href="[% c.uri_for("/static/css/gdropdown.css") %]" rel="stylesheet" type="text/css"/>
<link href="[% c.uri_for("/static/css/skin/ui.dynatree.css") %]" rel="stylesheet" type="text/css"/>
<script type="text/javascript">

function expandAll(node, tree) {
    if (node.isExpandable && !node.isExpanded) {
        tree._expandNode(node);
    }
    var children = node.getChildren();
    for (var i=0; i<children.length; i++) {
        expandAll(children[i], tree);
    }
}
	
var treeData = [% tree %];
var selectedKeys;
var tipsOpen = false;

//fire it up, which takes care of the rest
var authors = new Array();

var keywords_ac;
var author_org_ac;
var author_name_ac;

function add_author(name, org) {
    var divtag = "authline_"+authors.length;
    var auth_line = $("<div id='"+divtag+"'/>");

    var text_for_p;
    if (org == "") {
        text_for_p = name+" ";
    } else if (name == "") {
        text_for_p = org+" ";
    } else {
        text_for_p = name + " (" + org +") ";
    }

    var p_tag = $("<p>"+text_for_p+"</p>");

    // a-delete tag
    var a_tag = $("<a href='delete_author' id='delete_"+authors.length+"'><em id='delete_"+authors.length+"'>delete</em></a>");
    a_tag.click(function () {
        $('#'+divtag).remove();
        return false;
    });
    var hidden_tag = $('<input type="hidden" name="authors" value="'+name+"=>"+org+'">');
    $("#author_lines").append(auth_line);
    auth_line.append(hidden_tag);
    auth_line.append(p_tag);
    p_tag.append(a_tag);

    authors.push(divtag);
}

function draw_ajax_poly(id) {
    $.get('[% c.uri_for("/rest/location/") %]' + id, function(data) {
        var polygonCoords = [];
        for (var i=0; i<data.polygon.length; i++) {
            polygonCoords.push(new google.maps.LatLng(data.polygon[i][0], data.polygon[i][1]));
        }
        draw_polygon(polygonCoords, data.color);
/*        var p1 = new google.maps.Polygon({
            paths: polygonCoords,
            strokeColor: data.color,
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: data.color,
            editable: false,
            fillOpacity: 0.35
        });

        // show polygon on the map
        p1.setMap(map);
*/
    }, 'json');
}

function draw_polygon(coords, color) {
    var polygon = new google.maps.Polygon({
        paths: coords,
        strokeColor: color,
        strokeOpacity: 0.8,
        strokeWeight: 2,
        fillColor: color,
        editable: false,
        fillOpacity: 0.35
    });

    // show polygon on the map
    polygon.setMap(map);
    polygons.push(polygon);
}

var polygons = [];
var circles = [];
var map;

$(document).ready(function() {

    // for authors
    [% FOREACH author = authors %]
        add_author("[% author.name %]", "[% author.org %]");
    [% END %]

    $('#author_add').click(function() {
        var author_name = $("#author_name").val();
        var author_org = $("#author_org").val();
        if (author_name == "" && author_org == "")
            return false;
        add_author(author_name, author_org);
        $("#author_name").val('');
        $("#author_org").val('');
        return false;
    });
    //map

    var laosCenter=new google.maps.LatLng(18.229, 104.634);
    var myOptions = {
        zoom: 7,
        center: laosCenter,
        mapTypeId: google.maps.MapTypeId.ROADMAP
    }
    map = new google.maps.Map(document.getElementById('main-map'), myOptions);

    var drawingManager = new google.maps.drawing.DrawingManager({
    drawingMode: google.maps.drawing.OverlayType.POLYGON,
    drawingControl: true,
        drawingControlOptions: {
            position: google.maps.ControlPosition.TOP_CENTER,
           drawingModes: [
                google.maps.drawing.OverlayType.POLYGON /*,
                google.maps.drawing.OverlayType.CIRCLE */
            ]
        },
        circleOptions: {
            editable: true,
            strokeColor: "#AAAA55",
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: "#AAAA55",
            fillOpacity: 0.35
        },
        polygonOptions: {
            editable: true,
            strokeColor: "#AAAA55",
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: "#AAAA55",
            fillOpacity: 0.35
        }
    });
    drawingManager.setMap(map);
    google.maps.event.addListener(drawingManager, 'polygoncomplete', function(p) {
        polygons.push(p);
    });

    google.maps.event.addListener(drawingManager, 'circlecomplete', function(p) {
        circles.push(p);
    });

    //reset
    $('#reset').click(function(){ 
        for (var i=0; i<polygons.length; i++) {
            if (polygons[i] != null) {
                polygons[i].setMap(null);
            }
        }
        for (var i=0; i<circles.length; i++) {
            if (circles[i] != null) {
                circles[i].setMap(null);
            }
        }
        circles = [];
        polygons = [];
    });

    
    [% IF document.areas %]
        [% area = document.areas.first %]
        [% bbox = area.get_bbox %]
        var east = [% bbox.0 %];
        var north = [% bbox.1 %];
        var west = [% bbox.2 %];
        var south = [% bbox.3 %];
    [% END %]

    [% FOREACH area IN document.areas %]
        [% bbox = area.get_bbox %]
        if ([% bbox.0 %] < east) 
            east = [% bbox.0 %];
        if ([% bbox.1 %] < north) 
            north = [% bbox.1 %];
        if ([% bbox.2 %] > west) 
            west = [% bbox.2 %];
        if ([% bbox.3 %] > south) 
            south = [% bbox.3 %];

        var bounds = new google.maps.LatLngBounds();

        bounds.extend(new google.maps.LatLng(east, north));
        bounds.extend(new google.maps.LatLng(west, south));
        map.fitBounds(bounds);

        var polygonCoords = [ new google.maps.LatLng([% area.google_polygon.join("), new google.maps.LatLng(") %] ) ];
        draw_polygon(polygonCoords, '#AAAA55');
        // construct the polygon
        /*polygon = new google.maps.Polygon({
                              paths: polygonCoords,
                              strokeColor: "#FF0000",
                              strokeOpacity: 0.8,
                              strokeWeight: 2,
                              fillColor: "#FF0000",
                              editable: true,
                              fillOpacity: 0.35
        });

        // show polygon on the map
        polygon.setMap(map);*/
        $('#map-container').show();
        // add to the hidden input
        //$('#mapcoords').val("([% area.google_polygon.join(')(') %])");
    [% END %]
    $('div#main-map').css("height",$('div#main-map').width());

    $('.togglemap').click(function(){
        $('#map-container').toggle();
        return false;
    });

    //tooltip
    /*var tooltips = $( "[title]" ).tooltip();
    $( "<button>" ).text( "Toggle help" ).button().click(function() {
        if (tipsOpen)
            tooltips.tooltip( "close" );
        else
            tooltips.tooltip( "open" );
        tipsOpen = !tipsOpen;
    }).insertBefore( "form" );
*/
    [% IF selected_folders %]
      selectedKeys = [% selected_folders %];
    [% END %]
    $("#check_tree").dynatree({
      checkbox: true,
      selectMode: 2,
      children: treeData,
      onSelect: function(select, dtnode) {
        // Display list of selected nodes
        var selNodes = dtnode.tree.getSelectedNodes();
        // convert to title/key array
        var selKeys = $.map(selNodes, function(node){
             return node.data.key;
        });
        selectedKeys = selKeys.join(',');
        $('#folder').val(selectedKeys);
      },
      onClick: function(dtnode, event) {
                // We should not toggle, if target was "checkbox", because this
                // would result in double-toggle (i.e. no toggle) 
        if( dtnode.getEventTargetType(event) == "title" )
            dtnode.toggleSelect(); 
      },
      onKeydown: function(dtnode, event) {
        if( event.which == 32 ) {
          dtnode.toggleSelect();
          return false;
        }
      }
    });
    [% FOREACH key IN selected_folders.split(',') %]
        $("#check_tree").dynatree("getTree").getNodeByKey("[% key %]").select();
        var node = $("#check_tree").dynatree("getTree").getNodeByKey("[% key %]");
        while (node = node.getParent())
            node.expand();
    [% END %]

    //map controls
    //start process to set up custom drop down
    //create the options that respond to click
    var select_options = [];
    [% FOREACH location IN locations %]
        select_options.push(new optionDiv({
                gmap: map,
                name: "[% location.description | html %]",
                title: "[% location.description | html %]",
                id: "location_[% location.id %]",
                action: function(){
                    draw_ajax_poly([% location.id %]);
                }

        }));
    [% END %]

    var optionDiv1 = new optionDiv({
                name: 'Option1',
                title: "This acts like a button or click event",
                id: "mapOpt",
                action: function(){
                    alert('option1');
                }
        });
        
    var optionDiv2 = new optionDiv({
                gmap: map,
                name: 'Option2',
                title: "This acts like a button or click event",
                id: "satelliteOpt",
                action: function(){
                    alert('option2');
                }
        });
        
        
        //possibly add a separator between controls        
        var sep = new separator();
        
        //put them all together to create the drop down       
        var dropDownDiv = new dropDownOptionsDiv({
            items: select_options,
            id: "myddOptsDiv"
        });

        var dropDown1 = new dropDownControl({
                gmap: map,
                name: 'Provinces',
                id: 'ddControl',
                title: 'Select a pre-defined location if you don\'t want to draw your own poluygon',
                position: google.maps.ControlPosition.TOP_RIGHT,
                dropDown: dropDownDiv 
});

    $('#document_form').submit(function(){
        $('#folder').val(selectedKeys);
        var str_pol = [];
        for (var i=0; i<polygons.length; i++) {
            str_pol.push(polygons[i].getPath().getArray().join(''));
        }
        $('#mapcoords').val(str_pol.join(';'));
    });


    //form validation rules
    $("#document_form").validate({
        rules: {
            title: "required",
            folder: "required",
            pubyear: {
                required: true,
                minlength: 4,
                maxlength: 4,
                digits: true
            }
        },
        messages: {
            title: "Please enter a title",
            folder: "Please select at least one folder",
            pubyear: "Please enter a publication year (4 digits)",
            document: "Please attach a document"
        },
        submitHandler: function(form) {
            form.submit();
        }
    });
    keywords_ac = $('#keywords').autocomplete({ 
        serviceUrl:'/rest/keywords',
        minChars:2,
        delimiter: /,\s*/, // regex or character
        maxHeight:400,
        width:500,
        zIndex: 9999,
        deferRequestBy: 0 //miliseconds
    });
    author_name_ac = $('#author_name').autocomplete({ 
        serviceUrl:'/rest/author',
        minChars:2,
        maxHeight:400,
        width:350,
        zIndex: 9999,
        deferRequestBy: 0 //miliseconds
    });
    author_org_ac = $('#author_org').autocomplete({ 
        serviceUrl:'/rest/org',
        minChars:2,
        maxHeight:400,
        width:350,
        zIndex: 9999,
        deferRequestBy: 0 //miliseconds
    });
});
</script>
